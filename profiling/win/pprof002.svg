<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: unnamed Pages: 1 -->
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[
/**
 *  SVGPan library 1.2.2
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the
 * first g-element), including the library into any SVG adds the following
 * capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behaviour of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * Known issues:
 *
 *  - Zooming (while panning) on Safari has still some issues
 *
 * Releases:
 *
 * 1.2.2, Tue Aug 30 17:21:56 CEST 2011, Andrea Leofreddi
 *	- Fixed viewBox on root tag (#7)
 *	- Improved zoom speed (#2)
 *
 * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
 *	- Fixed a regression with mouse wheel (now working on Firefox 5)
 *	- Working with viewBox attribute (#4)
 *	- Added "use strict;" and fixed resulting warnings (#5)
 *	- Added configuration variables, dragging is disabled by default (#3)
 *
 * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
 *	Fixed a bug with browser mouse handler interaction
 *
 * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
 *	Updated the zoom code to support the mouse wheel on Safari/Chrome
 *
 * 1.0, Andrea Leofreddi
 *	First release
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2017 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
var zoomScale = 0.2; // Zoom sensitivity

/// <====
/// END OF CONFIGURATION

var root = document.documentElement;

var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

        setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg"
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
]]></script><g id="viewport" transform="scale(0.5,0.5) translate(0,0)"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 482)">
<title>unnamed</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-482 1110,-482 1110,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_L</title>
<polygon fill="none" stroke="black" points="8,-337 8,-470 536,-470 536,-337 8,-337"/>
</g>
<!-- Type: alloc_space -->
<g id="node1" class="node">
<title>Type: alloc_space</title>
<polygon fill="#f8f8f8" stroke="black" points="528,-462 16,-462 16,-345 528,-345 528,-462"/>
<text text-anchor="start" x="24" y="-445.2" font-family="Times,serif" font-size="16.00">Type: alloc_space</text>
<text text-anchor="start" x="24" y="-427.2" font-family="Times,serif" font-size="16.00">Time: May 14, 2022 at 11:47am (CEST)</text>
<text text-anchor="start" x="24" y="-409.2" font-family="Times,serif" font-size="16.00">Showing nodes accounting for 8GB, 98.77% of 8.10GB total</text>
<text text-anchor="start" x="24" y="-391.2" font-family="Times,serif" font-size="16.00">Dropped 73 nodes (cum &lt;= 0.04GB)</text>
<text text-anchor="start" x="24" y="-354.2" font-family="Times,serif" font-size="16.00">See https://git.io/JfYMW for how to read the graph</text>
</g>
<!-- N1 -->
<g id="node1" class="node">
<title>N1</title>
<g id="a_node1"><a xlink:title="time.AfterFunc (6.67GB)">
<polygon fill="#edd6d5" stroke="#b20a00" points="653.5,-199 400.5,-199 400.5,-87 653.5,-87 653.5,-199"/>
<text text-anchor="middle" x="527" y="-175.8" font-family="Times,serif" font-size="24.00">time</text>
<text text-anchor="middle" x="527" y="-149.8" font-family="Times,serif" font-size="24.00">AfterFunc</text>
<text text-anchor="middle" x="527" y="-123.8" font-family="Times,serif" font-size="24.00">6.66GB (82.26%)</text>
<text text-anchor="middle" x="527" y="-97.8" font-family="Times,serif" font-size="24.00">of 6.67GB (82.32%)</text>
</a>
</g>
</g>
<!-- NN1_0 -->
<g id="NN1_0" class="node">
<title>NN1_0</title>
<g id="a_NN1_0"><a xlink:title="6.66GB">
<polygon fill="#f8f8f8" stroke="black" points="554,-36 504,-36 500,-32 500,0 550,0 554,-4 554,-36"/>
<polyline fill="none" stroke="black" points="550,-32 500,-32 "/>
<polyline fill="none" stroke="black" points="550,-32 550,0 "/>
<polyline fill="none" stroke="black" points="550,-32 554,-36 "/>
<text text-anchor="middle" x="527" y="-16.1" font-family="Times,serif" font-size="8.00">80B</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;NN1_0 -->
<g id="edge1" class="edge">
<title>N1&#45;&gt;NN1_0</title>
<g id="a_edge1"><a xlink:title="6.66GB">
<path fill="none" stroke="black" d="M527,-86.98C527,-72.87 527,-58.31 527,-46.3"/>
<polygon fill="black" stroke="black" points="530.5,-46.07 527,-36.07 523.5,-46.07 530.5,-46.07"/>
</a>
</g>
<g id="a_edge1&#45;label"><a xlink:title="6.66GB">
<text text-anchor="middle" x="556" y="-57.8" font-family="Times,serif" font-size="14.00"> 6.66GB</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node2" class="node">
<title>N2</title>
<g id="a_node2"><a xlink:title="limiter.(*V1).regenerateTokens (5.93GB)">
<polygon fill="#edd7d5" stroke="#b20f00" points="713.5,-450 546.5,-450 546.5,-357 713.5,-357 713.5,-450"/>
<text text-anchor="middle" x="630" y="-434" font-family="Times,serif" font-size="15.00">limiter</text>
<text text-anchor="middle" x="630" y="-417" font-family="Times,serif" font-size="15.00">(*V1)</text>
<text text-anchor="middle" x="630" y="-400" font-family="Times,serif" font-size="15.00">regenerateTokens</text>
<text text-anchor="middle" x="630" y="-383" font-family="Times,serif" font-size="15.00">0.98GB (12.10%)</text>
<text text-anchor="middle" x="630" y="-366" font-family="Times,serif" font-size="15.00">of 5.93GB (73.17%)</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N1 -->
<g id="edge4" class="edge">
<title>N2&#45;&gt;N1</title>
<g id="a_edge4"><a xlink:title="limiter.(*V1).regenerateTokens &#45;&gt; time.AfterFunc (4.95GB)">
<path fill="none" stroke="#b21800" stroke-width="4" d="M578.8,-356.98C562.13,-339.12 545.5,-317.31 536,-294 525.26,-267.65 522.04,-236.53 521.88,-209.48"/>
<polygon fill="#b21800" stroke="#b21800" stroke-width="4" points="525.38,-209.36 521.96,-199.33 518.38,-209.3 525.38,-209.36"/>
</a>
</g>
<g id="a_edge4&#45;label"><a xlink:title="limiter.(*V1).regenerateTokens &#45;&gt; time.AfterFunc (4.95GB)">
<text text-anchor="middle" x="565" y="-268.3" font-family="Times,serif" font-size="14.00"> 4.95GB</text>
</a>
</g>
</g>
<!-- NN2_0 -->
<g id="NN2_0" class="node">
<title>NN2_0</title>
<g id="a_NN2_0"><a xlink:title="0.98GB">
<polygon fill="#f8f8f8" stroke="black" points="657,-290 607,-290 603,-286 603,-254 653,-254 657,-258 657,-290"/>
<polyline fill="none" stroke="black" points="653,-286 603,-286 "/>
<polyline fill="none" stroke="black" points="653,-286 653,-254 "/>
<polyline fill="none" stroke="black" points="653,-286 657,-290 "/>
<text text-anchor="middle" x="630" y="-270.1" font-family="Times,serif" font-size="8.00">16B</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;NN2_0 -->
<g id="edge2" class="edge">
<title>N2&#45;&gt;NN2_0</title>
<g id="a_edge2"><a xlink:title="0.98GB">
<path fill="none" stroke="black" d="M630,-356.84C630,-337.85 630,-316.44 630,-300.02"/>
<polygon fill="black" stroke="black" points="633.5,-300.02 630,-290.02 626.5,-300.02 633.5,-300.02"/>
</a>
</g>
<g id="a_edge2&#45;label"><a xlink:title="0.98GB">
<text text-anchor="middle" x="659" y="-315.8" font-family="Times,serif" font-size="14.00"> 0.98GB</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node3" class="node">
<title>N3</title>
<g id="a_node3"><a xlink:title="limiter.(*V3).regenerateTokens (2.04GB)">
<polygon fill="#edddd5" stroke="#b23c00" points="873.5,-440 738.5,-440 738.5,-367 873.5,-367 873.5,-440"/>
<text text-anchor="middle" x="806" y="-426.4" font-family="Times,serif" font-size="12.00">limiter</text>
<text text-anchor="middle" x="806" y="-413.4" font-family="Times,serif" font-size="12.00">(*V3)</text>
<text text-anchor="middle" x="806" y="-400.4" font-family="Times,serif" font-size="12.00">regenerateTokens</text>
<text text-anchor="middle" x="806" y="-387.4" font-family="Times,serif" font-size="12.00">0.36GB (4.41%)</text>
<text text-anchor="middle" x="806" y="-374.4" font-family="Times,serif" font-size="12.00">of 2.04GB (25.20%)</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;N1 -->
<g id="edge5" class="edge">
<title>N3&#45;&gt;N1</title>
<g id="a_edge5"><a xlink:title="limiter.(*V3).regenerateTokens &#45;&gt; time.AfterFunc (1.68GB)">
<path fill="none" stroke="#b24300" stroke-width="2" d="M776.5,-366.93C749.24,-334.92 706.88,-287.31 666,-250 649.38,-234.83 630.73,-219.56 612.61,-205.51"/>
<polygon fill="#b24300" stroke="#b24300" stroke-width="2" points="614.4,-202.47 604.34,-199.15 610.13,-208.02 614.4,-202.47"/>
</a>
</g>
<g id="a_edge5&#45;label"><a xlink:title="limiter.(*V3).regenerateTokens &#45;&gt; time.AfterFunc (1.68GB)">
<text text-anchor="middle" x="738" y="-268.3" font-family="Times,serif" font-size="14.00"> 1.68GB</text>
</a>
</g>
</g>
<!-- NN3_0 -->
<g id="NN3_0" class="node">
<title>NN3_0</title>
<g id="a_NN3_0"><a xlink:title="0.36GB">
<polygon fill="#f8f8f8" stroke="black" points="833,-290 783,-290 779,-286 779,-254 829,-254 833,-258 833,-290"/>
<polyline fill="none" stroke="black" points="829,-286 779,-286 "/>
<polyline fill="none" stroke="black" points="829,-286 829,-254 "/>
<polyline fill="none" stroke="black" points="829,-286 833,-290 "/>
<text text-anchor="middle" x="806" y="-270.1" font-family="Times,serif" font-size="8.00">16B</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;NN3_0 -->
<g id="edge3" class="edge">
<title>N3&#45;&gt;NN3_0</title>
<g id="a_edge3"><a xlink:title="0.36GB">
<path fill="none" stroke="black" d="M806,-366.77C806,-345.77 806,-319.63 806,-300.29"/>
<polygon fill="black" stroke="black" points="809.5,-300.05 806,-290.05 802.5,-300.05 809.5,-300.05"/>
</a>
</g>
<g id="a_edge3&#45;label"><a xlink:title="0.36GB">
<text text-anchor="middle" x="835" y="-315.8" font-family="Times,serif" font-size="14.00"> 0.36GB</text>
</a>
</g>
</g>
<!-- N4 -->
<g id="node4" class="node">
<title>N4</title>
<g id="a_node4"><a xlink:title="runtime.schedule (0.05GB)">
<polygon fill="#ededec" stroke="#b2b1ad" points="1106,-421.5 1008,-421.5 1008,-385.5 1106,-385.5 1106,-421.5"/>
<text text-anchor="middle" x="1057" y="-410.6" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="1057" y="-401.6" font-family="Times,serif" font-size="8.00">schedule</text>
<text text-anchor="middle" x="1057" y="-392.6" font-family="Times,serif" font-size="8.00">0 of 0.05GB (0.59%)</text>
</a>
</g>
</g>
<!-- N5 -->
<g id="node5" class="node">
<title>N5</title>
<g id="a_node5"><a xlink:title="testing.(*B).launch (0.04GB)">
<polygon fill="#ededec" stroke="#b2b1ad" points="990,-425.5 892,-425.5 892,-381.5 990,-381.5 990,-425.5"/>
<text text-anchor="middle" x="941" y="-415.1" font-family="Times,serif" font-size="8.00">testing</text>
<text text-anchor="middle" x="941" y="-406.1" font-family="Times,serif" font-size="8.00">(*B)</text>
<text text-anchor="middle" x="941" y="-397.1" font-family="Times,serif" font-size="8.00">launch</text>
<text text-anchor="middle" x="941" y="-388.1" font-family="Times,serif" font-size="8.00">0 of 0.04GB (0.55%)</text>
</a>
</g>
</g>
<!-- N6 -->
<g id="node6" class="node">
<title>N6</title>
<g id="a_node6"><a xlink:title="testing.(*B).runN (0.04GB)">
<polygon fill="#ededec" stroke="#b2b1ad" points="970,-294 872,-294 872,-250 970,-250 970,-294"/>
<text text-anchor="middle" x="921" y="-283.6" font-family="Times,serif" font-size="8.00">testing</text>
<text text-anchor="middle" x="921" y="-274.6" font-family="Times,serif" font-size="8.00">(*B)</text>
<text text-anchor="middle" x="921" y="-265.6" font-family="Times,serif" font-size="8.00">runN</text>
<text text-anchor="middle" x="921" y="-256.6" font-family="Times,serif" font-size="8.00">0 of 0.04GB (0.55%)</text>
</a>
</g>
</g>
<!-- N5&#45;&gt;N6 -->
<g id="edge6" class="edge">
<title>N5&#45;&gt;N6</title>
<g id="a_edge6"><a xlink:title="testing.(*B).launch &#45;&gt; testing.(*B).runN (0.04GB)">
<path fill="none" stroke="#b2b1ad" d="M937.74,-381.41C934.5,-360.43 929.5,-328.01 925.8,-304.08"/>
<polygon fill="#b2b1ad" stroke="#b2b1ad" points="929.24,-303.43 924.26,-294.09 922.32,-304.5 929.24,-303.43"/>
</a>
</g>
<g id="a_edge6&#45;label"><a xlink:title="testing.(*B).launch &#45;&gt; testing.(*B).runN (0.04GB)">
<text text-anchor="middle" x="958" y="-315.8" font-family="Times,serif" font-size="14.00"> 0.04GB</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N1 -->
<g id="edge7" class="edge">
<title>N6&#45;&gt;N1</title>
<g id="a_edge7"><a xlink:title="testing.(*B).runN ... time.AfterFunc (0.01GB)">
<path fill="none" stroke="#b2b2b1" stroke-dasharray="1,5" d="M871.9,-255.17C819.97,-238.44 735.75,-211.29 663.53,-188.01"/>
<polygon fill="#b2b2b1" stroke="#b2b2b1" points="664.47,-184.64 653.88,-184.9 662.33,-191.3 664.47,-184.64"/>
</a>
</g>
<g id="a_edge7&#45;label"><a xlink:title="testing.(*B).runN ... time.AfterFunc (0.01GB)">
<text text-anchor="middle" x="823" y="-220.8" font-family="Times,serif" font-size="14.00"> 0.01GB</text>
</a>
</g>
</g>
</g>
</g></svg>
